---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta
      property="og:title"
      content="Discover Your Dream Dress at Wisifie, Where Wishes Come to Life"
    />
    <meta
      property="og:description"
      content="Wisifie is the premier destination for finding your dream dress!"
    />
    <meta
      property="og:image"
      content="https://res.cloudinary.com/dspfacgon/image/upload/f_auto,q_auto/wisifieogimage"
    />
    <meta property="og:url" content="https://wisifie.vercel.app/" />

    <title>{title}</title>
    <!-- Google tag (gtag.js) -->
    <script
      is:inline
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-1DTPGMQDXJ"></script>
    <script is:inline>
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }
    gtag("js", new Date());

    gtag("config", "G-1DTPGMQDXJ");
    </script>
    <!-- Paste this right before your closing </head> tag -->
    <script type="text/javascript">
    (function (f, b) {
      if (!b.__SV) {
        var e, g, i, h;
        window.mixpanel = b;
        b._i = [];
        b.init = function (e, f, c) {
          function g(a, d) {
            var b = d.split(".");
            2 == b.length && ((a = a[b[0]]), (d = b[1]));
            a[d] = function () {
              a.push([d].concat(Array.prototype.slice.call(arguments, 0)));
            };
          }
          var a = b;
          "undefined" !== typeof c ? (a = b[c] = []) : (c = "mixpanel");
          a.people = a.people || [];
          a.toString = function (a) {
            var d = "mixpanel";
            "mixpanel" !== c && (d += "." + c);
            a || (d += " (stub)");
            return d;
          };
          a.people.toString = function () {
            return a.toString(1) + ".people (stub)";
          };
          i =
            "disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(
              " "
            );
          for (h = 0; h < i.length; h++) g(a, i[h]);
          var j = "set set_once union unset remove delete".split(" ");
          a.get_group = function () {
            function b(c) {
              d[c] = function () {
                call2_args = arguments;
                call2 = [c].concat(Array.prototype.slice.call(call2_args, 0));
                a.push([e, call2]);
              };
            }
            for (
              var d = {},
              e = ["get_group"].concat(
                Array.prototype.slice.call(arguments, 0)
              ),
              c = 0;
              c < j.length;
              c++
            )
              b(j[c]);
            return d;
          };
          b._i.push([e, f, c]);
        };
        b.__SV = 1.2;
        e = f.createElement("script");
        e.type = "text/javascript";
        e.async = !0;
        e.src =
          "undefined" !== typeof MIXPANEL_CUSTOM_LIB_URL
            ? MIXPANEL_CUSTOM_LIB_URL
            : "file:" === f.location.protocol &&
              "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)
              ? "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"
              : "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
        g = f.getElementsByTagName("script")[0];
        g.parentNode.insertBefore(e, g);
      }
    })(document, window.mixpanel || []);
    </script>
  </head>
  <body>
    <slot />
  </body>
  <script is:inline>
  window.mixpanel.init("ff58af705064afe9619afd6bfa458cbe");
  document.body.addEventListener("click", (e) => {
    // Get the anchor tag element that was clicked.
    const anchorTag = e.target;

    // Check if the anchor tag has the data-link, data-price, and data-influencer-name attributes.
    if (
      anchorTag.hasAttribute("data-link") &&
      anchorTag.hasAttribute("data-price") &&
      anchorTag.hasAttribute("data-influencer-name")
    ) {
      // Get the values of the data attributes.
      const link = anchorTag.getAttribute("data-link");
      const price = anchorTag.getAttribute("data-price");
      const influencerName = anchorTag.getAttribute("data-influencer-name");
      window.mixpanel.track("Accesories Clicked to Purchase", {
        link,
        price,
        influencerName,
      });
    }
  });
  </script>
</html>
<style is:global>
  :root {
    --listing-gradient: linear-gradient(
      189deg,
      #a36261 -7.12%,
      rgba(163, 98, 97, 0) 40.81%
    );
  }
  .gradient {
    background: linear-gradient(
      189deg,
      #a36261 -7.12%,
      rgba(163, 98, 97, 0) 40.81%
    );
  }
</style>
